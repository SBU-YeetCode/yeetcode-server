# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  _id: ObjectId!
  dateCreated: Date!
  gameId: String!
  lastUpdated: Date!
  rating: Int!
  review: String!
  userId: String!
  userInfo: User!
}

input CommentInput {
  gameId: String!
  rating: Int!
  review: String!
  userId: String!
}

"""Date Type for GraphQL"""
scalar Date

type Game {
  _id: ObjectId!
  codingLanguage: String!
  commentCount: Int!
  commentsRef: [String!]!
  createdBy: String!
  dateCreated: Date!
  description: String!
  difficulty: String!
  lastUpdated: Date!
  levels: [Level!]!
  playCount: Int!
  questions: [Question!]!
  rating: Float!
  roadmap: [SubGameRoadmap!]!
  stages: [Stage!]!
  tags: [String!]!
  title: String!
  totalStars: Int!
}

input GameInput {
  codingLanguage: String!
  commentCount: Int!
  commentsRef: [String!]!
  createdBy: String!
  dateCreated: Date!
  description: String!
  difficulty: String!
  lastUpdated: Date!
  levels: [LevelInput!]!
  playCount: Int!
  questions: [QuestionInput!]!
  rating: Float!
  roadmap: [SubGameRoadmapInput!]!
  stages: [StageInput!]!
  tags: [String!]!
  title: String!
  totalStars: Int!
}

type GameProgress {
  _id: ObjectId!
  completedAt: Date
  game: Game!
  gameId: String!
  isCompleted: Boolean!
  levels: [LevelProgress!]
  questions: [QuestionProgress!]
  stages: [StageProgress!]
  startedAt: Date!
  userId: String!
}

type Hint {
  _id: ObjectId!
  description: String!
  timeToReveal: Int!
}

input HintInput {
  _id: ObjectId!
  description: String!
  timeToReveal: Int!
}

enum LANGUAGES {
  C
  CPP
  JAVA
  JAVASCRIPT
  PYTHON
}

type Level {
  _id: ObjectId!
  description: String!
  title: String!
}

input LevelInput {
  _id: ObjectId!
  description: String!
  title: String!
}

type LevelProgress {
  completed: Boolean!
  levelId: String!
}

type Matching {
  _id: ObjectId!
  pairOne: String!
  pairTwo: String!
}

input MatchingInput {
  _id: ObjectId!
  pairOne: String!
  pairTwo: String!
}

type Mutation {
  createComment(comment: CommentInput!, userId: ObjectId!): Comment!
  createGame(game: GameInput!): Game!
  createGameProgress(gameId: String!, userId: ObjectId!): GameProgress!
  createUser(user: UserInput!): User!
  deleteUser(userId: ObjectId!): User!
  updateLevels(gameId: String!, levelsToUpdate: [LevelInput!]!): [Level!]!
  updateUser(newAvatar: String, newLargePicture: String, newName: String, newUsername: String, userId: ObjectId!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PaginatedCommentResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [Comment!]!
}

type PaginatedGameResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [Game!]!
}

type PaginatedUserResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [User!]!
}

type Points {
  c: Int!
  cpp: Int!
  java: Int!
  javascript: Int!
  python: Int!
  total: Int!
}

input PointsInput {
  c: Int!
  cpp: Int!
  java: Int!
  javascript: Int!
  python: Int!
  total: Int!
}

type ProfilePicture {
  avatar: String!
  large: String!
}

input ProfilePictureInput {
  avatar: String!
  large: String!
}

type Query {
  getComment(id: ObjectId!): Comment
  getFilterGames(amount: Int = 10, cursor: String, language: LANGUAGES, sort: SORT_OPTIONS, sortDir: Int = 1): PaginatedGameResponse!
  getGame(id: String!): Game
  getGameComments(amount: Int = 10, cursor: String, gameId: String!): PaginatedCommentResponse!
  getGameProgress(id: ObjectId!): GameProgress
  getLeaderboard(amount: Int = 10, cursor: String, language: LANGUAGES): PaginatedUserResponse!
  getLevel(gameId: String!, levelId: String!): Level!
  getMe: User
  getQuestion(gameId: String!, questionId: String!): Question!
  getRoadmap(gameId: String!): [SubGameRoadmap!]!
  getSearch(amount: Int = 10, cursor: String, query: String!): PaginatedGameResponse!
  getStage(gameId: String!, stageId: String!): Stage!
  getUser(id: ObjectId!): User
  getUserCompletedGames(userId: String!): [GameProgress!]!
  getUserCreatedGames(userId: String!): [Game!]!
  getUserRecentGames(userId: String!): [GameProgress!]!
  getUserReviews(userId: String!): [Comment!]!
}

type Question {
  _id: ObjectId!
  correctChoice: String!
  description: String!
  exampleSolutionCode: String!
  exampleSolutionDescription: String!
  gameType: String!
  hints: [Hint!]!
  incorrectChoices: [String!]!
  lives: Int!
  matchings: [Matching!]!
  points: Int!
  sequence: String!
  timeLimit: Int!
  title: String!
  toAnswer: String!
}

input QuestionInput {
  _id: ObjectId!
  correctChoice: String!
  description: String!
  exampleSolutionCode: String!
  exampleSolutionDescription: String!
  gameType: String!
  hints: [HintInput!]!
  incorrectChoices: [String!]!
  lives: Int!
  matchings: [MatchingInput!]!
  points: Int!
  sequence: String!
  timeLimit: Int!
  title: String!
  toAnswer: String!
}

type QuestionProgress {
  completed: Boolean!
  livesLeft: Int!
  pointsReceived: Int!
  questionId: String!
}

enum SORT_OPTIONS {
  NEWEST
  PLAY_COUNT
  RATING
}

type Stage {
  _id: ObjectId!
  description: String!
  title: String!
}

input StageInput {
  _id: ObjectId!
  description: String!
  title: String!
}

type StageProgress {
  completed: Boolean!
  stageId: String!
}

type SubGameRoadmap {
  _id: ObjectId!
  kind: String!
  refId: String!
  sequence: String!
}

input SubGameRoadmapInput {
  _id: ObjectId!
  kind: String!
  refId: String!
  sequence: String!
}

type User {
  _id: ObjectId!
  comments: [Comment!]!
  email: String!
  gamesCompleted: [GameProgress!]!
  gamesCreated: [Game!]!
  gamesRecent: [GameProgress!]!
  lastUpdated: Date!
  name: String!
  points: Points!
  profilePicture: ProfilePicture!
  roles: [String!]!
  username: String!
}

input UserInput {
  _id: ObjectId!
  email: String!
  lastUpdated: Date!
  name: String!
  points: PointsInput!
  profilePicture: ProfilePictureInput!
  roles: [String!]!
  username: String!
}
