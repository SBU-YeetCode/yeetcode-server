# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  _id: ObjectId!
  dateCreated: Date!
  gameId: String!
  lastUpdated: Date!
  rating: Int!
  review: String!
  userId: String!
  userInfo: User!
}

input CommentInput {
  gameId: String!
  rating: Int!
  review: String!
  userId: String!
}

"""Date Type for GraphQL"""
scalar Date

type Deleted {
  amountDeleted: Int!
  err: String
  success: Boolean!
}

type FillInTheBlank {
  _id: ObjectId!
  prompt: [String!]!
  solutions: [String!]!
}

input FillInTheBlankInput {
  _id: ObjectId!
  prompt: [String!]!
  solutions: [String!]!
}

enum GAMETYPE {
  FILLINBLANK
  LIVECODING
  MATCHING
  MULTIPLECHOICE
  SPOTTHEBUG
}

type Game {
  _id: ObjectId!
  codingLanguage: String!
  commentCount: Int!
  commentsRef: [String!]!
  createdBy: String!
  dateCreated: Date!
  description: String!
  difficulty: String!
  lastUpdated: Date!
  levels: [LevelObject!]!
  playCount: Int!
  questions: [QuestionObject!]!
  rating: Float!
  roadmap: [RoadmapObject!]!
  stages: [StageObject!]!
  tags: [String!]!
  title: String!
  totalStars: Int!
}

type GameProgress {
  _id: ObjectId!
  codingLanguage: String!
  completedAt: Date
  game: Game!
  gameId: String!
  isCompleted: Boolean!
  levels: [LevelProgress!]
  questions: [QuestionProgress!]
  stages: [StageProgress!]
  startedAt: Date!
  totalPoints: Int!
  userId: String!
}

type Hint {
  _id: ObjectId!
  description: String!
  timeToReveal: Int!
}

input HintInput {
  _id: ObjectId!
  description: String!
  timeToReveal: Int!
}

enum LANGUAGES {
  C
  CPP
  JAVA
  JAVASCRIPT
  PYTHON
}

input Level {
  _id: ObjectId!
  description: String!
  title: String!
}

input LevelInput {
  description: String!
  title: String!
}

type LevelObject {
  _id: ObjectId!
  description: String!
  title: String!
}

type LevelProgress {
  completed: Boolean!
  levelId: String!
}

type LiveCoding {
  _id: ObjectId!
  exampleSolutionCode: String!
  exampleSolutionDescription: String!
  prompt: String!
}

input LiveCodingInput {
  _id: ObjectId!
  exampleSolutionCode: String!
  exampleSolutionDescription: String!
  prompt: String!
}

type Matching {
  _id: ObjectId!
  matching: [MatchingCard!]!
  prompt: String!
}

type MatchingCard {
  pairOne: String!
  pairTwo: String!
}

input MatchingCardInput {
  pairOne: String!
  pairTwo: String!
}

input MatchingInput {
  _id: ObjectId!
  matching: [MatchingCardInput!]!
  prompt: String!
}

type MultipleChoice {
  _id: ObjectId!
  correctChoice: String!
  incorrectChoices: [String!]!
  prompt: String!
}

input MultipleChoiceInput {
  _id: ObjectId!
  correctChoice: String!
  incorrectChoices: [String!]!
  prompt: String!
}

type Mutation {
  createComment(comment: CommentInput!, userId: ObjectId!): Comment!
  createGame(codingLanguage: String, description: String, difficulty: String, tags: [String!], title: String): Game!
  createGameProgress(gameId: String!, userId: ObjectId!): GameProgress!
  createLevel(gameId: String!, level: LevelInput!): LevelObject!
  createQuestion(gameId: String!, question: QuestionInput!): QuestionObject!
  createStage(gameId: String!, stage: StageInput!): StageObject!
  createUser(user: UserInput!): User!
  deleteGame(gameId: String!, userId: ObjectId!): Deleted!
  deleteGameProgress(gameProgressId: String!, userId: ObjectId!): Deleted!
  deleteUser(userId: ObjectId!): Deleted!
  submitQuestion(gameId: String!, questionId: String!, submittedAnswer: String!, userId: ObjectId!): SubmitQuestion!
  updateGame(gameId: ObjectId!, newCodingLanguage: String, newDescription: String, newDifficulty: String, newTags: [String!], newTitle: String): Game!
  updateLevels(gameId: String!, levelsToUpdate: [Level!]!): [LevelObject!]!
  updateQuestionProgress(gameId: String!, questionProgress: QuestionProgressInput!, userId: ObjectId!): QuestionProgress!
  updateQuestions(gameId: String!, questionsToUpdate: [Question!]!): [QuestionObject!]!
  updateRoadmap(gameId: String!, roadmap: [RoadmapInput!]!): [RoadmapObject!]!
  updateStages(gameId: String!, stagesToUpdate: [Stage!]!): [StageObject!]!
  updateUser(newAvatar: String, newLargePicture: String, newName: String, newUsername: String, userId: ObjectId!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PaginatedCommentResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [Comment!]!
}

type PaginatedGameResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [Game!]!
}

type PaginatedUserResponse {
  hasMore: Boolean!
  nextCursor: String
  nodes: [User!]!
}

type Points {
  c: Int!
  cpp: Int!
  java: Int!
  javascript: Int!
  python: Int!
  total: Int!
}

input PointsInput {
  c: Int!
  cpp: Int!
  java: Int!
  javascript: Int!
  python: Int!
  total: Int!
}

type ProfilePicture {
  avatar: String!
  large: String!
}

input ProfilePictureInput {
  avatar: String!
  large: String!
}

type Query {
  getComment(id: ObjectId!): Comment
  getFilterGames(amount: Int = 10, cursor: String, language: LANGUAGES, sort: SORT_OPTIONS, sortDir: Int = 1): PaginatedGameResponse!
  getGame(id: String!): Game
  getGameComments(amount: Int = 10, cursor: String, gameId: String!): PaginatedCommentResponse!
  getGameProgress(id: ObjectId!): GameProgress
  getGameProgressByUser(gameId: ObjectId!, userId: ObjectId!): GameProgress
  getLeaderboard(amount: Int = 10, cursor: String, language: LANGUAGES): PaginatedUserResponse!
  getLevel(gameId: String!, levelId: String!): LevelObject!
  getMe: User
  getQuestion(gameId: String!, questionId: String!): QuestionObject!
  getRoadmap(gameId: String!): [RoadmapObject!]!
  getSearch(amount: Int = 10, cursor: String, query: String!): PaginatedGameResponse!
  getStage(gameId: String!, stageId: String!): StageObject!
  getUser(id: ObjectId!): User
  getUserCompletedGames(userId: String!): [GameProgress!]!
  getUserCreatedGames(userId: String!): [Game!]!
  getUserRecentGames(userId: String!): [GameProgress!]!
  getUserReviews(userId: String!): [Comment!]!
}

input Question {
  _id: ObjectId!
  description: String!
  fillInTheBlank: FillInTheBlankInput
  gameType: GAMETYPE!
  hints: [HintInput!]!
  liveCoding: LiveCodingInput
  lives: Int!
  matching: MatchingInput
  multipleChoice: MultipleChoiceInput
  points: Int!
  spotTheBug: SpotTheBugInput
  timeLimit: Int!
  title: String!
}

input QuestionInput {
  description: String!
  fillInTheBlank: FillInTheBlankInput
  gameType: GAMETYPE!
  hints: [HintInput!]!
  liveCoding: LiveCodingInput
  lives: Int!
  matching: MatchingInput
  multipleChoice: MultipleChoiceInput
  points: Int!
  spotTheBug: SpotTheBugInput
  timeLimit: Int!
  title: String!
}

type QuestionObject {
  _id: ObjectId!
  description: String!
  fillInTheBlank: FillInTheBlank
  gameType: GAMETYPE!
  hints: [Hint!]!
  liveCoding: LiveCoding
  lives: Int!
  matching: Matching
  multipleChoice: MultipleChoice
  points: Int!
  spotTheBug: SpotTheBug
  timeLimit: Int!
  title: String!
}

type QuestionProgress {
  completed: Boolean!
  dateStarted: Date

  """Number representing the index of the latest hint revealed"""
  hintsRevealed: Int
  livesLeft: Int!
  pointsReceived: Int!
  questionId: String!
}

input QuestionProgressInput {
  completed: Boolean!
  dateStarted: Date

  """Number representing the index of the latest hint revealed"""
  hintsRevealed: Int = -1
  livesLeft: Int!
  pointsReceived: Int!
  questionId: String!
}

input RoadmapInput {
  kind: String!
  parent: ObjectId
  refId: String!
  sequence: Int!
}

type RoadmapObject {
  _id: ObjectId!
  kind: String!
  parent: ObjectId
  refId: String!
  sequence: Int!
}

enum SORT_OPTIONS {
  NEWEST
  PLAY_COUNT
  RATING
}

type SpotTheBug {
  _id: ObjectId!
  bugLine: Int!
  code: String!
  prompt: String!
}

input SpotTheBugInput {
  _id: ObjectId!
  bugLine: Int!
  code: String!
  prompt: String!
}

input Stage {
  _id: ObjectId!
  description: String!
  title: String!
}

input StageInput {
  description: String!
  title: String!
}

type StageObject {
  _id: ObjectId!
  description: String!
  title: String!
}

type StageProgress {
  completed: Boolean!
  stageId: String!
}

type SubmitQuestion {
  isCorrect: Boolean!
}

type User {
  _id: ObjectId!
  comments: [Comment!]!
  email: String!
  gamesCompleted: [GameProgress!]!
  gamesCreated: [Game!]!
  gamesRecent: [GameProgress!]!
  lastUpdated: Date!
  name: String!
  points: Points!
  profilePicture: ProfilePicture!
  roles: [String!]!
  username: String!
}

input UserInput {
  _id: ObjectId!
  email: String!
  lastUpdated: Date!
  name: String!
  points: PointsInput!
  profilePicture: ProfilePictureInput!
  roles: [String!]!
  username: String!
}
